package com.globalpaymentsinc.greenhouse;

import org.apache.commons.lang.StringUtils;

/**
 * INTEGRATED CIRCUIT CARD (ICC) ADDENDUM RECORD, TYPE 12
 * 
 * @author nickfeng
 *
 */
public class BICCAddendum {

	/**
	 * Record Type, 1-2, AN 2, Always 12.
	 */
	private String recordType = "12";

	/**
	 * Extended Service Code, 3-5, N 3, The service code is a three-digit value on
	 * the magnetic stripe (tracks 1 and 2) and on the chip of a bankcard. The
	 * service code instructs the terminal about conditions under which the card may
	 * be used.
	 */
	private String extendedServiceCode;

	/**
	 * Chip Condition Code, 6-6, N 1, For Visa: Provides information about fallback
	 * transactions initiated from the magnetic stripe on chip cards at a chip
	 * capable terminal. Valid values are:
	 * <ul>
	 * <li>0 - Not a fallback transaction.</li>
	 * <li>1 - Transaction initiated from a magnetic stripe on a chip card and the
	 * last read at the chip capable terminal was a successful chip read or was not
	 * a chip transaction.</li>
	 * <li>2 - Transaction initiated from a magnetic stripe on a chip card and the
	 * previous transaction at the chip capable terminal was an unsuccessful chip
	 * read.</li>
	 * </ul>
	 * For other card types: Space filled.
	 */
	private char chipConditionCode;

	/**
	 * Card Sequence Number Tag 5F34, 7-9, N 3, Identifies and differentiates cards
	 * with the same account number
	 */
	private String cardSequenceNumber;

	/**
	 * Application Interchange Profile Tag 82, 10 -13, AN 4, Indicates the
	 * capabilities of the card to support specific functions in the application.
	 */
	private String applicationInterchangeProfile;

	/**
	 * Application Transaction Counter Tag 9F36, 14-17, AN 4, Counter maintained by
	 * the application in the chip card that counts the number of chip card
	 * transactions.
	 */
	private String applicationTransactionCounter;

	/**
	 * Application Cryptogram Tag 9F26, 18-33, AN 16, Cryptogram generated by a chip
	 * card and used by the Issuer to verify that an authorization request came from
	 * the card.
	 */
	private String applicationCryptogram;

	/**
	 * Cryptogram Amount Tag 9F02, 34-45, N 12, Identifies the chip card transaction
	 * amount for which the merchant received an approved authorization response.
	 * Decimal implied based on the Cryptogram Currency Code.
	 */
	private String cryptogramAmount;

	/**
	 * Cryptogram Information Data Tag 9F27, 46-47, AN 2, Indicates the type of
	 * cryptogram (e.g., AAC, TC and ARQC).
	 */
	private String cryptogramInformationData;

	/**
	 * Dedicated File Name Tag 84, 48-79, AN 32, Identifies the name of the
	 * dedicated file. Variable length, left justified, space filled.
	 */
	private String dedicatedFileName;

	/**
	 * Terminal Country Code Tag 9F1A, 80-82, N 3, Indicates the code assigned to
	 * the country in which the chip card terminal is located.
	 */
	private String terminalCountryCode;

	/**
	 * Terminal Capability Profile Tag 9F33, 83-88, AN 6, Indicates the card data
	 * input, Cardholder Verification Method (CVM) and security capabilities of the
	 * chip card terminal.
	 */
	private String terminalCapabilityProfile;

	/**
	 * Terminal Type Tag 9F35, 89-90, N 2, Indicates the environment of the
	 * terminal, its communications capability and its operational control.
	 */
	private String terminalType;

	/* Filler, 91-94, AN 4, Space Filled. */

	/**
	 * Record Sequence Number, 95-100, N 6, Previous Record Sequence Number plus 1.
	 */
	private String recordSequenceNumber;

	public String getRecordType() {
		return recordType;
	}

	public void setRecordType(String recordType) {
		this.recordType = recordType;
	}

	public String getExtendedServiceCode() {
		return extendedServiceCode;
	}

	public void setExtendedServiceCode(String extendedServiceCode) {
		this.extendedServiceCode = extendedServiceCode;
	}

	public char getChipConditionCode() {
		return chipConditionCode;
	}

	public void setChipConditionCode(char chipConditionCode) {
		this.chipConditionCode = chipConditionCode;
	}

	public String getCardSequenceNumber() {
		return cardSequenceNumber;
	}

	public void setCardSequenceNumber(String cardSequenceNumber) {
		this.cardSequenceNumber = cardSequenceNumber;
	}

	public String getApplicationInterchangeProfile() {
		return applicationInterchangeProfile;
	}

	public void setApplicationInterchangeProfile(String applicationInterchangeProfile) {
		this.applicationInterchangeProfile = applicationInterchangeProfile;
	}

	public String getApplicationTransactionCounter() {
		return applicationTransactionCounter;
	}

	public void setApplicationTransactionCounter(String applicationTransactionCounter) {
		this.applicationTransactionCounter = applicationTransactionCounter;
	}

	public String getApplicationCryptogram() {
		return applicationCryptogram;
	}

	public void setApplicationCryptogram(String applicationCryptogram) {
		this.applicationCryptogram = applicationCryptogram;
	}

	public String getCryptogramAmount() {
		return cryptogramAmount;
	}

	public void setCryptogramAmount(String cryptogramAmount) {
		this.cryptogramAmount = cryptogramAmount;
	}

	public String getCryptogramInformationData() {
		return cryptogramInformationData;
	}

	public void setCryptogramInformationData(String cryptogramInformationData) {
		this.cryptogramInformationData = cryptogramInformationData;
	}

	public String getDedicatedFileName() {
		return dedicatedFileName;
	}

	public void setDedicatedFileName(String dedicatedFileName) {
		this.dedicatedFileName = dedicatedFileName;
	}

	public String getTerminalCountryCode() {
		return terminalCountryCode;
	}

	public void setTerminalCountryCode(String terminalCountryCode) {
		this.terminalCountryCode = terminalCountryCode;
	}

	public String getTerminalCapabilityProfile() {
		return terminalCapabilityProfile;
	}

	public void setTerminalCapabilityProfile(String terminalCapabilityProfile) {
		this.terminalCapabilityProfile = terminalCapabilityProfile;
	}

	public String getTerminalType() {
		return terminalType;
	}

	public void setTerminalType(String terminalType) {
		this.terminalType = terminalType;
	}

	public String getRecordSequenceNumber() {
		return recordSequenceNumber;
	}

	public void setRecordSequenceNumber(String recordSequenceNumber) {
		this.recordSequenceNumber = recordSequenceNumber;
	}

	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append(recordType);
		sb.append(extendedServiceCode);
		sb.append(chipConditionCode);
		sb.append(cardSequenceNumber);
		sb.append(applicationInterchangeProfile);
		sb.append(applicationTransactionCounter);
		sb.append(applicationCryptogram);
		sb.append(StringUtils.leftPad(cryptogramAmount, 12, '0'));
		sb.append(cryptogramInformationData);
		sb.append(StringUtils.rightPad(dedicatedFileName, 32, ' '));
		sb.append(terminalCountryCode);
		sb.append(terminalCapabilityProfile);
		sb.append(terminalType);
		sb.append(StringUtils.repeat(" ", 4));
		sb.append(StringUtils.leftPad(recordSequenceNumber, 6, '0'));
		return sb.toString();
	}

	public static BICCAddendum fromString(String s) {
		if (StringUtils.isEmpty(s) || s.length() != 100 || !s.startsWith("12")) {
			return null;
		}
		BICCAddendum bicca = new BICCAddendum();
		bicca.setExtendedServiceCode(s.substring(2, 5));
		bicca.setChipConditionCode(s.charAt(5));
		bicca.setCardSequenceNumber(s.substring(6, 9));
		bicca.setApplicationInterchangeProfile(s.substring(9, 13));
		bicca.setApplicationTransactionCounter(s.substring(13, 17));
		bicca.setApplicationCryptogram(s.substring(17, 33));
		bicca.setCryptogramAmount(s.substring(33, 45));
		bicca.setCryptogramInformationData(s.substring(45, 47));
		bicca.setDedicatedFileName(s.substring(47, 79));
		bicca.setTerminalCountryCode(s.substring(79, 82));
		bicca.setTerminalCapabilityProfile(s.substring(82, 88));
		bicca.setTerminalType(s.substring(88, 90));
		bicca.setRecordSequenceNumber(s.substring(94, 100));
		return bicca;
	}

}
